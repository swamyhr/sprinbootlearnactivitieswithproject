Sprinboot is extension of spring framework

1. Spring boot goal to help developers in configuration of spring application
2. Provide pre-configured starter for example "spring-boot-starter-jpa" includes all the dependencies needed to use Spring Data JPA and Hibernate.
3. Provides embedded tomcat server, helps developers to avoid manual server configuration for application.
4. Auto-configuration
	a. based on jar dependencies springboot will configure the application to up and running, for example ComponentScan, Dispatcher servlet, view resolver
	b. In case of Hibernate / JPA , Data source , Entity Manager factory etc will be configure by sprinboot

Springboot creation steps
	1. link spring initliaser link  -> https://start.spring.io/
	2. Project dependency manager (Maven / Gradle) and Language (ex, java, kotlin)
	3. Select springboot version
	4. Mention project artifact, name and description
	5. Package name and package type 
	6. For spring boot 3 or greater, Java 17+ must be selected 
	7. Select Java version
	8. Left side window where need to select the dependencies for your project typical ones are 
		a. Spring web
		b. Spring Data JPA, 
 		c. MYSQL Driver (for MySQL support)

folder structure
	src -> main -> java : is the place where we do put our source java code 
	src -> main -> resource : this is the folder we do keep static and UI related contents and application.properties file (very important since contains all the configuration properties of an application such as database, security and port number etc.)
	test folder -> place to place / keep junit unit test files
	pom.xml (project object model.xml) => most important file , since it does contains all the project dependencies and plugin details.
		for example -> spring-boot-starter-web (which in turn will include spring-web, spring-webmvc, tomcat server etc)

In springboot application  
	the entry point is the class which consists main method and @SprinBootApplication annotation

some of the annotation
	@Controller -> to make java class as controller class
	@ResponseBody -> to convert Java object to JSON while sending response
	@RestController -> replaces @Controller and @ResponseBody annotation 
	
	---- Http Method related annotation -----
	@GetMapping -> to handle read resource related request
	@PostMapping -> to handle resource creation request
	@PutMapping -> to update the existing resource with new / updated details
	@DeleteMapping -> to remove permanently the resource from storage place(database) 

	 we can create Java Object and send as reponse , it will be converted as JSON by springboot as indicated using @RestController
	@PathVariable -> one of the way to send data in URL to server 
	name used in url path mentioned in server side will be used to fetch the data from url
	for example : student/1 -> in server side for this url the set up would be student/{id} -> here "id" will be used to fetch the detail, here that is student id 1 

@RequestParam -> used to query parameter in request url
	example -> localhost:8080/users?id={idvalue} > here idValue is queryParameter
	@RequestParam type variable

	how to handle multiple query parameters 
	we need to add multiple @RequestParam type variable 

@PathVariable is to bind value from url to method parameters
@RequestParam is to fetch the query parameters in url 
